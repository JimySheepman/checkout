// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mock_file is a generated GoMock package.
package mock_file

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfileHandlerClient is a mock of fileHandlerClient interface.
type MockfileHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockfileHandlerClientMockRecorder
}

// MockfileHandlerClientMockRecorder is the mock recorder for MockfileHandlerClient.
type MockfileHandlerClientMockRecorder struct {
	mock *MockfileHandlerClient
}

// NewMockfileHandlerClient creates a new mock instance.
func NewMockfileHandlerClient(ctrl *gomock.Controller) *MockfileHandlerClient {
	mock := &MockfileHandlerClient{ctrl: ctrl}
	mock.recorder = &MockfileHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileHandlerClient) EXPECT() *MockfileHandlerClientMockRecorder {
	return m.recorder
}

// AddItemHandler mocks base method.
func (m *MockfileHandlerClient) AddItemHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemHandler indicates an expected call of AddItemHandler.
func (mr *MockfileHandlerClientMockRecorder) AddItemHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemHandler", reflect.TypeOf((*MockfileHandlerClient)(nil).AddItemHandler), ctx, input)
}

// AddVasItemToItemHandler mocks base method.
func (m *MockfileHandlerClient) AddVasItemToItemHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVasItemToItemHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVasItemToItemHandler indicates an expected call of AddVasItemToItemHandler.
func (mr *MockfileHandlerClientMockRecorder) AddVasItemToItemHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVasItemToItemHandler", reflect.TypeOf((*MockfileHandlerClient)(nil).AddVasItemToItemHandler), ctx, input)
}

// DisplayCartHandler mocks base method.
func (m *MockfileHandlerClient) DisplayCartHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCartHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayCartHandler indicates an expected call of DisplayCartHandler.
func (mr *MockfileHandlerClientMockRecorder) DisplayCartHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCartHandler", reflect.TypeOf((*MockfileHandlerClient)(nil).DisplayCartHandler), ctx, input)
}

// RemoveItemHandler mocks base method.
func (m *MockfileHandlerClient) RemoveItemHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveItemHandler indicates an expected call of RemoveItemHandler.
func (mr *MockfileHandlerClientMockRecorder) RemoveItemHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemHandler", reflect.TypeOf((*MockfileHandlerClient)(nil).RemoveItemHandler), ctx, input)
}

// ResetCartHandler mocks base method.
func (m *MockfileHandlerClient) ResetCartHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCartHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCartHandler indicates an expected call of ResetCartHandler.
func (mr *MockfileHandlerClientMockRecorder) ResetCartHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCartHandler", reflect.TypeOf((*MockfileHandlerClient)(nil).ResetCartHandler), ctx, input)
}
