// Code generated by MockGen. DO NOT EDIT.
// Source: file_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	models "checkout-case/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcartService is a mock of cartService interface.
type MockcartService struct {
	ctrl     *gomock.Controller
	recorder *MockcartServiceMockRecorder
}

// MockcartServiceMockRecorder is the mock recorder for MockcartService.
type MockcartServiceMockRecorder struct {
	mock *MockcartService
}

// NewMockcartService creates a new mock instance.
func NewMockcartService(ctrl *gomock.Controller) *MockcartService {
	mock := &MockcartService{ctrl: ctrl}
	mock.recorder = &MockcartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcartService) EXPECT() *MockcartServiceMockRecorder {
	return m.recorder
}

// AddItemToCart mocks base method.
func (m *MockcartService) AddItemToCart(ctx context.Context, req *models.AddItemServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToCart", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItemToCart indicates an expected call of AddItemToCart.
func (mr *MockcartServiceMockRecorder) AddItemToCart(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToCart", reflect.TypeOf((*MockcartService)(nil).AddItemToCart), ctx, req)
}

// AddVasItemToItem mocks base method.
func (m *MockcartService) AddVasItemToItem(ctx context.Context, req *models.AddVasItemToItemServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVasItemToItem", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVasItemToItem indicates an expected call of AddVasItemToItem.
func (mr *MockcartServiceMockRecorder) AddVasItemToItem(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVasItemToItem", reflect.TypeOf((*MockcartService)(nil).AddVasItemToItem), ctx, req)
}

// DisplayCart mocks base method.
func (m *MockcartService) DisplayCart(ctx context.Context) (*models.DisplayCartServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCart", ctx)
	ret0, _ := ret[0].(*models.DisplayCartServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayCart indicates an expected call of DisplayCart.
func (mr *MockcartServiceMockRecorder) DisplayCart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCart", reflect.TypeOf((*MockcartService)(nil).DisplayCart), ctx)
}

// RemoveItemFromCart mocks base method.
func (m *MockcartService) RemoveItemFromCart(ctx context.Context, itemId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemFromCart", ctx, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemFromCart indicates an expected call of RemoveItemFromCart.
func (mr *MockcartServiceMockRecorder) RemoveItemFromCart(ctx, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemFromCart", reflect.TypeOf((*MockcartService)(nil).RemoveItemFromCart), ctx, itemId)
}

// ResetCart mocks base method.
func (m *MockcartService) ResetCart(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCart", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCart indicates an expected call of ResetCart.
func (mr *MockcartServiceMockRecorder) ResetCart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCart", reflect.TypeOf((*MockcartService)(nil).ResetCart), ctx)
}
