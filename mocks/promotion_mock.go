// Code generated by MockGen. DO NOT EDIT.
// Source: promotion.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	domain "checkout-case/internal/core/domain"
	models "checkout-case/internal/core/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPromotionServiceClient is a mock of PromotionServiceClient interface.
type MockPromotionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPromotionServiceClientMockRecorder
}

// MockPromotionServiceClientMockRecorder is the mock recorder for MockPromotionServiceClient.
type MockPromotionServiceClientMockRecorder struct {
	mock *MockPromotionServiceClient
}

// NewMockPromotionServiceClient creates a new mock instance.
func NewMockPromotionServiceClient(ctrl *gomock.Controller) *MockPromotionServiceClient {
	mock := &MockPromotionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPromotionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromotionServiceClient) EXPECT() *MockPromotionServiceClientMockRecorder {
	return m.recorder
}

// FindBestPromotion mocks base method.
func (m *MockPromotionServiceClient) FindBestPromotion(ctx context.Context, cart *domain.Cart) (*models.PromotionServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBestPromotion", ctx, cart)
	ret0, _ := ret[0].(*models.PromotionServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBestPromotion indicates an expected call of FindBestPromotion.
func (mr *MockPromotionServiceClientMockRecorder) FindBestPromotion(ctx, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBestPromotion", reflect.TypeOf((*MockPromotionServiceClient)(nil).FindBestPromotion), ctx, cart)
}
