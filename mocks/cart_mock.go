// Code generated by MockGen. DO NOT EDIT.
// Source: cart.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	domain "checkout-case/internal/core/domain"
	models "checkout-case/internal/core/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartService is a mock of CartService interface.
type MockCartService struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceMockRecorder
}

// MockCartServiceMockRecorder is the mock recorder for MockCartService.
type MockCartServiceMockRecorder struct {
	mock *MockCartService
}

// NewMockCartService creates a new mock instance.
func NewMockCartService(ctrl *gomock.Controller) *MockCartService {
	mock := &MockCartService{ctrl: ctrl}
	mock.recorder = &MockCartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartService) EXPECT() *MockCartServiceMockRecorder {
	return m.recorder
}

// AddItemToCart mocks base method.
func (m *MockCartService) AddItemToCart(ctx context.Context, req *models.AddItemServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToCart", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItemToCart indicates an expected call of AddItemToCart.
func (mr *MockCartServiceMockRecorder) AddItemToCart(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToCart", reflect.TypeOf((*MockCartService)(nil).AddItemToCart), ctx, req)
}

// AddVasItemToItem mocks base method.
func (m *MockCartService) AddVasItemToItem(ctx context.Context, req *models.AddVasItemToItemServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVasItemToItem", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVasItemToItem indicates an expected call of AddVasItemToItem.
func (mr *MockCartServiceMockRecorder) AddVasItemToItem(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVasItemToItem", reflect.TypeOf((*MockCartService)(nil).AddVasItemToItem), ctx, req)
}

// DisplayCart mocks base method.
func (m *MockCartService) DisplayCart(ctx context.Context) (*models.DisplayCartServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCart", ctx)
	ret0, _ := ret[0].(*models.DisplayCartServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayCart indicates an expected call of DisplayCart.
func (mr *MockCartServiceMockRecorder) DisplayCart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCart", reflect.TypeOf((*MockCartService)(nil).DisplayCart), ctx)
}

// RemoveItemFromCart mocks base method.
func (m *MockCartService) RemoveItemFromCart(ctx context.Context, itemId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemFromCart", ctx, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemFromCart indicates an expected call of RemoveItemFromCart.
func (mr *MockCartServiceMockRecorder) RemoveItemFromCart(ctx, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemFromCart", reflect.TypeOf((*MockCartService)(nil).RemoveItemFromCart), ctx, itemId)
}

// ResetCart mocks base method.
func (m *MockCartService) ResetCart(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCart", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCart indicates an expected call of ResetCart.
func (mr *MockCartServiceMockRecorder) ResetCart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCart", reflect.TypeOf((*MockCartService)(nil).ResetCart), ctx)
}

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockCartRepository) AddItem(item *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockCartRepositoryMockRecorder) AddItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockCartRepository)(nil).AddItem), item)
}

// AddVasItemToItemByItemID mocks base method.
func (m *MockCartRepository) AddVasItemToItemByItemID(itemId string, vasItem *domain.VasItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVasItemToItemByItemID", itemId, vasItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVasItemToItemByItemID indicates an expected call of AddVasItemToItemByItemID.
func (mr *MockCartRepositoryMockRecorder) AddVasItemToItemByItemID(itemId, vasItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVasItemToItemByItemID", reflect.TypeOf((*MockCartRepository)(nil).AddVasItemToItemByItemID), itemId, vasItem)
}

// FindItemByItemIdFromCart mocks base method.
func (m *MockCartRepository) FindItemByItemIdFromCart(itemId int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindItemByItemIdFromCart", itemId)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindItemByItemIdFromCart indicates an expected call of FindItemByItemIdFromCart.
func (mr *MockCartRepositoryMockRecorder) FindItemByItemIdFromCart(itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindItemByItemIdFromCart", reflect.TypeOf((*MockCartRepository)(nil).FindItemByItemIdFromCart), itemId)
}

// GetCart mocks base method.
func (m *MockCartRepository) GetCart() (*domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart")
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartRepositoryMockRecorder) GetCart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartRepository)(nil).GetCart))
}

// RemoveItem mocks base method.
func (m *MockCartRepository) RemoveItem(item *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockCartRepositoryMockRecorder) RemoveItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockCartRepository)(nil).RemoveItem), item)
}

// ResetCart mocks base method.
func (m *MockCartRepository) ResetCart() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCart")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCart indicates an expected call of ResetCart.
func (mr *MockCartRepositoryMockRecorder) ResetCart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCart", reflect.TypeOf((*MockCartRepository)(nil).ResetCart))
}

// UpdateItemQuantity mocks base method.
func (m *MockCartRepository) UpdateItemQuantity(item *domain.Item, req *models.AddItemServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemQuantity", item, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemQuantity indicates an expected call of UpdateItemQuantity.
func (mr *MockCartRepositoryMockRecorder) UpdateItemQuantity(item, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemQuantity", reflect.TypeOf((*MockCartRepository)(nil).UpdateItemQuantity), item, req)
}

// UpdateVasItemQuantity mocks base method.
func (m *MockCartRepository) UpdateVasItemQuantity(item *domain.Item, vasItem *domain.VasItem, req *models.AddVasItemToItemServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVasItemQuantity", item, vasItem, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVasItemQuantity indicates an expected call of UpdateVasItemQuantity.
func (mr *MockCartRepositoryMockRecorder) UpdateVasItemQuantity(item, vasItem, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVasItemQuantity", reflect.TypeOf((*MockCartRepository)(nil).UpdateVasItemQuantity), item, vasItem, req)
}
