// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockRestHandlerClient is a mock of RestHandlerClient interface.
type MockRestHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockRestHandlerClientMockRecorder
}

// MockRestHandlerClientMockRecorder is the mock recorder for MockRestHandlerClient.
type MockRestHandlerClientMockRecorder struct {
	mock *MockRestHandlerClient
}

// NewMockRestHandlerClient creates a new mock instance.
func NewMockRestHandlerClient(ctrl *gomock.Controller) *MockRestHandlerClient {
	mock := &MockRestHandlerClient{ctrl: ctrl}
	mock.recorder = &MockRestHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestHandlerClient) EXPECT() *MockRestHandlerClientMockRecorder {
	return m.recorder
}

// AddItemHandler mocks base method.
func (m *MockRestHandlerClient) AddItemHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItemHandler indicates an expected call of AddItemHandler.
func (mr *MockRestHandlerClientMockRecorder) AddItemHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).AddItemHandler), c)
}

// AddVasItemToItemHandler mocks base method.
func (m *MockRestHandlerClient) AddVasItemToItemHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVasItemToItemHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVasItemToItemHandler indicates an expected call of AddVasItemToItemHandler.
func (mr *MockRestHandlerClientMockRecorder) AddVasItemToItemHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVasItemToItemHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).AddVasItemToItemHandler), c)
}

// DisplayCartHandler mocks base method.
func (m *MockRestHandlerClient) DisplayCartHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCartHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisplayCartHandler indicates an expected call of DisplayCartHandler.
func (mr *MockRestHandlerClientMockRecorder) DisplayCartHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCartHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).DisplayCartHandler), c)
}

// HealthCheckHandler mocks base method.
func (m *MockRestHandlerClient) HealthCheckHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheckHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheckHandler indicates an expected call of HealthCheckHandler.
func (mr *MockRestHandlerClientMockRecorder) HealthCheckHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheckHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).HealthCheckHandler), c)
}

// RemoveItemHandler mocks base method.
func (m *MockRestHandlerClient) RemoveItemHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemHandler indicates an expected call of RemoveItemHandler.
func (mr *MockRestHandlerClientMockRecorder) RemoveItemHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).RemoveItemHandler), c)
}

// ResetCartHandler mocks base method.
func (m *MockRestHandlerClient) ResetCartHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCartHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCartHandler indicates an expected call of ResetCartHandler.
func (mr *MockRestHandlerClientMockRecorder) ResetCartHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCartHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).ResetCartHandler), c)
}

// MockFileHandlerClient is a mock of FileHandlerClient interface.
type MockFileHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerClientMockRecorder
}

// MockFileHandlerClientMockRecorder is the mock recorder for MockFileHandlerClient.
type MockFileHandlerClientMockRecorder struct {
	mock *MockFileHandlerClient
}

// NewMockFileHandlerClient creates a new mock instance.
func NewMockFileHandlerClient(ctrl *gomock.Controller) *MockFileHandlerClient {
	mock := &MockFileHandlerClient{ctrl: ctrl}
	mock.recorder = &MockFileHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandlerClient) EXPECT() *MockFileHandlerClientMockRecorder {
	return m.recorder
}

// AddItemHandler mocks base method.
func (m *MockFileHandlerClient) AddItemHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemHandler indicates an expected call of AddItemHandler.
func (mr *MockFileHandlerClientMockRecorder) AddItemHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemHandler", reflect.TypeOf((*MockFileHandlerClient)(nil).AddItemHandler), ctx, input)
}

// AddVasItemToItemHandler mocks base method.
func (m *MockFileHandlerClient) AddVasItemToItemHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVasItemToItemHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVasItemToItemHandler indicates an expected call of AddVasItemToItemHandler.
func (mr *MockFileHandlerClientMockRecorder) AddVasItemToItemHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVasItemToItemHandler", reflect.TypeOf((*MockFileHandlerClient)(nil).AddVasItemToItemHandler), ctx, input)
}

// DisplayCartHandler mocks base method.
func (m *MockFileHandlerClient) DisplayCartHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCartHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayCartHandler indicates an expected call of DisplayCartHandler.
func (mr *MockFileHandlerClientMockRecorder) DisplayCartHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCartHandler", reflect.TypeOf((*MockFileHandlerClient)(nil).DisplayCartHandler), ctx, input)
}

// RemoveItemHandler mocks base method.
func (m *MockFileHandlerClient) RemoveItemHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveItemHandler indicates an expected call of RemoveItemHandler.
func (mr *MockFileHandlerClientMockRecorder) RemoveItemHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemHandler", reflect.TypeOf((*MockFileHandlerClient)(nil).RemoveItemHandler), ctx, input)
}

// ResetCartHandler mocks base method.
func (m *MockFileHandlerClient) ResetCartHandler(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCartHandler", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCartHandler indicates an expected call of ResetCartHandler.
func (mr *MockFileHandlerClientMockRecorder) ResetCartHandler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCartHandler", reflect.TypeOf((*MockFileHandlerClient)(nil).ResetCartHandler), ctx, input)
}
